{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.execOnce = execOnce;\nexports.getLocationOrigin = getLocationOrigin;\nexports.getURL = getURL;\nexports.getDisplayName = getDisplayName;\nexports.isResSent = isResSent;\nexports.loadGetInitialProps = loadGetInitialProps;\nexports.formatWithValidation = formatWithValidation;\nexports.ST = exports.SP = exports.urlObjectKeys = void 0;\nvar _formatUrl = require(\"./router/utils/format-url\"); /**\n                                                       * Utils\n                                                       */\nfunction execOnce(fn) {\n  let used = false;\n  let result;\n  return (...args) => {\n    if (!used) {\n      used = true;\n      result = fn(...args);\n    }\n    return result;\n  };\n}\nfunction getLocationOrigin() {\n  const {\n    protocol,\n    hostname,\n    port\n  } = window.location;\n  return `${protocol}//${hostname}${port ? ':' + port : ''}`;\n}\nfunction getURL() {\n  const {\n    href\n  } = window.location;\n  const origin = getLocationOrigin();\n  return href.substring(origin.length);\n}\nfunction getDisplayName(Component) {\n  return typeof Component === 'string' ? Component : Component.displayName || Component.name || 'Unknown';\n}\nfunction isResSent(res) {\n  return res.finished || res.headersSent;\n}\nasync function loadGetInitialProps(App, ctx) {\n  if (true) {\n    var _App$prototype;\n    if ((_App$prototype = App.prototype) == null ? void 0 : _App$prototype.getInitialProps) {\n      const message = `\"${getDisplayName(App)}.getInitialProps()\" is defined as an instance method - visit https://err.sh/vercel/next.js/get-initial-props-as-an-instance-method for more information.`;\n      throw new Error(message);\n    }\n  } // when called from _app `ctx` is nested in `ctx`\n  const res = ctx.res || ctx.ctx && ctx.ctx.res;\n  if (!App.getInitialProps) {\n    if (ctx.ctx && ctx.Component) {\n      // @ts-ignore pageProps default\n      return {\n        pageProps: await loadGetInitialProps(ctx.Component, ctx.ctx)\n      };\n    }\n    return {};\n  }\n  const props = await App.getInitialProps(ctx);\n  if (res && isResSent(res)) {\n    return props;\n  }\n  if (!props) {\n    const message = `\"${getDisplayName(App)}.getInitialProps()\" should resolve to an object. But found \"${props}\" instead.`;\n    throw new Error(message);\n  }\n  if (true) {\n    if (Object.keys(props).length === 0 && !ctx.ctx) {\n      console.warn(`${getDisplayName(App)} returned an empty object from \\`getInitialProps\\`. This de-optimizes and prevents automatic static optimization. https://err.sh/vercel/next.js/empty-object-getInitialProps`);\n    }\n  }\n  return props;\n}\nconst urlObjectKeys = ['auth', 'hash', 'host', 'hostname', 'href', 'path', 'pathname', 'port', 'protocol', 'query', 'search', 'slashes'];\nexports.urlObjectKeys = urlObjectKeys;\nfunction formatWithValidation(url) {\n  if (true) {\n    if (url !== null && typeof url === 'object') {\n      Object.keys(url).forEach(key => {\n        if (urlObjectKeys.indexOf(key) === -1) {\n          console.warn(`Unknown key passed via urlObject into url.format: ${key}`);\n        }\n      });\n    }\n  }\n  return (0, _formatUrl.formatUrl)(url);\n}\nconst SP = typeof performance !== 'undefined';\nexports.SP = SP;\nconst ST = SP && typeof performance.mark === 'function' && typeof performance.measure === 'function';\nexports.ST = ST;","map":{"version":3,"sources":["../../../next-server/lib/utils.ts"],"names":["execOnce","fn","used","result","args","getLocationOrigin","protocol","hostname","port","window","location","getURL","href","origin","substring","length","getDisplayName","Component","displayName","name","isResSent","res","finished","headersSent","loadGetInitialProps","App","ctx","prototype","getInitialProps","message","Error","pageProps","props","Object","keys","console","warn","urlObjectKeys","formatWithValidation","url","forEach","key","indexOf","SP","performance","ST","mark","measure"],"mappings":"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","sourcesContent":["import { IncomingMessage, ServerResponse } from 'http'\nimport { ParsedUrlQuery } from 'querystring'\nimport { ComponentType } from 'react'\nimport { UrlObject } from 'url'\nimport { formatUrl } from './router/utils/format-url'\nimport { ManifestItem } from '../server/load-components'\nimport { NextRouter } from './router/router'\nimport { Env } from '@next/env'\nimport { BuildManifest } from '../server/get-page-files'\n\n/**\n * Types used by both next and next-server\n */\n\nexport type NextComponentType<\n  C extends BaseContext = NextPageContext,\n  IP = {},\n  P = {}\n> = ComponentType<P> & {\n  /**\n   * Used for initial page load data population. Data returned from `getInitialProps` is serialized when server rendered.\n   * Make sure to return plain `Object` without using `Date`, `Map`, `Set`.\n   * @param ctx Context of `page`\n   */\n  getInitialProps?(context: C): IP | Promise<IP>\n}\n\nexport type DocumentType = NextComponentType<\n  DocumentContext,\n  DocumentInitialProps,\n  DocumentProps\n> & {\n  renderDocument(\n    Document: DocumentType,\n    props: DocumentProps\n  ): React.ReactElement\n}\n\nexport type AppType = NextComponentType<\n  AppContextType,\n  AppInitialProps,\n  AppPropsType\n>\n\nexport type AppTreeType = ComponentType<\n  AppInitialProps & { [name: string]: any }\n>\n\n/**\n * Web vitals provided to _app.reportWebVitals by Core Web Vitals plugin developed by Google Chrome team.\n * https://nextjs.org/blog/next-9-4#integrated-web-vitals-reporting\n */\nexport type NextWebVitalsMetric = {\n  id: string\n  label: string\n  name: string\n  startTime: number\n  value: number\n}\n\nexport type Enhancer<C> = (Component: C) => C\n\nexport type ComponentsEnhancer =\n  | {\n      enhanceApp?: Enhancer<AppType>\n      enhanceComponent?: Enhancer<NextComponentType>\n    }\n  | Enhancer<NextComponentType>\n\nexport type RenderPageResult = {\n  html: string\n  head?: Array<JSX.Element | null>\n}\n\nexport type RenderPage = (\n  options?: ComponentsEnhancer\n) => RenderPageResult | Promise<RenderPageResult>\n\nexport type BaseContext = {\n  res?: ServerResponse\n  [k: string]: any\n}\n\nexport type HeadEntry = [string, { [key: string]: any }]\n\nexport type NEXT_DATA = {\n  props: Record<string, any>\n  page: string\n  query: ParsedUrlQuery\n  buildId: string\n  assetPrefix?: string\n  runtimeConfig?: { [key: string]: any }\n  nextExport?: boolean\n  autoExport?: boolean\n  isFallback?: boolean\n  dynamicIds?: string[]\n  err?: Error & { statusCode?: number }\n  gsp?: boolean\n  gssp?: boolean\n  customServer?: boolean\n  gip?: boolean\n  appGip?: boolean\n  head: HeadEntry[]\n  locale?: string\n  locales?: string[]\n  defaultLocale?: string\n}\n\n/**\n * `Next` context\n */\nexport interface NextPageContext {\n  /**\n   * Error object if encountered during rendering\n   */\n  err?: (Error & { statusCode?: number }) | null\n  /**\n   * `HTTP` request object.\n   */\n  req?: IncomingMessage\n  /**\n   * `HTTP` response object.\n   */\n  res?: ServerResponse\n  /**\n   * Path section of `URL`.\n   */\n  pathname: string\n  /**\n   * Query string section of `URL` parsed as an object.\n   */\n  query: ParsedUrlQuery\n  /**\n   * `String` of the actual path including query.\n   */\n  asPath?: string\n  /**\n   * `Component` the tree of the App to use if needing to render separately\n   */\n  AppTree: AppTreeType\n}\n\nexport type AppContextType<R extends NextRouter = NextRouter> = {\n  Component: NextComponentType<NextPageContext>\n  AppTree: AppTreeType\n  ctx: NextPageContext\n  router: R\n}\n\nexport type AppInitialProps = {\n  pageProps: any\n}\n\nexport type AppPropsType<\n  R extends NextRouter = NextRouter,\n  P = {}\n> = AppInitialProps & {\n  Component: NextComponentType<NextPageContext, any, P>\n  router: R\n  __N_SSG?: boolean\n  __N_SSP?: boolean\n}\n\nexport type DocumentContext = NextPageContext & {\n  renderPage: RenderPage\n}\n\nexport type DocumentInitialProps = RenderPageResult & {\n  styles?: React.ReactElement[] | React.ReactFragment\n}\n\nexport type DocumentProps = DocumentInitialProps & {\n  __NEXT_DATA__: NEXT_DATA\n  dangerousAsPath: string\n  docComponentsRendered: {\n    Html?: boolean\n    Main?: boolean\n    Head?: boolean\n    NextScript?: boolean\n  }\n  buildManifest: BuildManifest\n  ampPath: string\n  inAmpMode: boolean\n  hybridAmp: boolean\n  isDevelopment: boolean\n  dynamicImports: ManifestItem[]\n  assetPrefix?: string\n  canonicalBase: string\n  headTags: any[]\n  unstable_runtimeJS?: false\n  devOnlyCacheBusterQueryString: string\n  locale?: string\n}\n\n/**\n * Next `API` route request\n */\nexport interface NextApiRequest extends IncomingMessage {\n  /**\n   * Object of `query` values from url\n   */\n  query: {\n    [key: string]: string | string[]\n  }\n  /**\n   * Object of `cookies` from header\n   */\n  cookies: {\n    [key: string]: string\n  }\n\n  body: any\n\n  env: Env\n\n  preview?: boolean\n  /**\n   * Preview data set on the request, if any\n   * */\n  previewData?: any\n}\n\n/**\n * Send body of response\n */\ntype Send<T> = (body: T) => void\n\n/**\n * Next `API` route response\n */\nexport type NextApiResponse<T = any> = ServerResponse & {\n  /**\n   * Send data `any` data in response\n   */\n  send: Send<T>\n  /**\n   * Send data `json` data in response\n   */\n  json: Send<T>\n  status: (statusCode: number) => NextApiResponse<T>\n  redirect(url: string): NextApiResponse<T>\n  redirect(status: number, url: string): NextApiResponse<T>\n\n  /**\n   * Set preview data for Next.js' prerender mode\n   */\n  setPreviewData: (\n    data: object | string,\n    options?: {\n      /**\n       * Specifies the number (in seconds) for the preview session to last for.\n       * The given number will be converted to an integer by rounding down.\n       * By default, no maximum age is set and the preview session finishes\n       * when the client shuts down (browser is closed).\n       */\n      maxAge?: number\n    }\n  ) => NextApiResponse<T>\n  clearPreviewData: () => NextApiResponse<T>\n}\n\n/**\n * Next `API` route handler\n */\nexport type NextApiHandler<T = any> = (\n  req: NextApiRequest,\n  res: NextApiResponse<T>\n) => void | Promise<void>\n\n/**\n * Utils\n */\nexport function execOnce<T extends (...args: any[]) => ReturnType<T>>(\n  fn: T\n): T {\n  let used = false\n  let result: ReturnType<T>\n\n  return ((...args: any[]) => {\n    if (!used) {\n      used = true\n      result = fn(...args)\n    }\n    return result\n  }) as T\n}\n\nexport function getLocationOrigin() {\n  const { protocol, hostname, port } = window.location\n  return `${protocol}//${hostname}${port ? ':' + port : ''}`\n}\n\nexport function getURL() {\n  const { href } = window.location\n  const origin = getLocationOrigin()\n  return href.substring(origin.length)\n}\n\nexport function getDisplayName<P>(Component: ComponentType<P>) {\n  return typeof Component === 'string'\n    ? Component\n    : Component.displayName || Component.name || 'Unknown'\n}\n\nexport function isResSent(res: ServerResponse) {\n  return res.finished || res.headersSent\n}\n\nexport async function loadGetInitialProps<\n  C extends BaseContext,\n  IP = {},\n  P = {}\n>(App: NextComponentType<C, IP, P>, ctx: C): Promise<IP> {\n  if (process.env.NODE_ENV !== 'production') {\n    if (App.prototype?.getInitialProps) {\n      const message = `\"${getDisplayName(\n        App\n      )}.getInitialProps()\" is defined as an instance method - visit https://err.sh/vercel/next.js/get-initial-props-as-an-instance-method for more information.`\n      throw new Error(message)\n    }\n  }\n  // when called from _app `ctx` is nested in `ctx`\n  const res = ctx.res || (ctx.ctx && ctx.ctx.res)\n\n  if (!App.getInitialProps) {\n    if (ctx.ctx && ctx.Component) {\n      // @ts-ignore pageProps default\n      return {\n        pageProps: await loadGetInitialProps(ctx.Component, ctx.ctx),\n      }\n    }\n    return {} as IP\n  }\n\n  const props = await App.getInitialProps(ctx)\n\n  if (res && isResSent(res)) {\n    return props\n  }\n\n  if (!props) {\n    const message = `\"${getDisplayName(\n      App\n    )}.getInitialProps()\" should resolve to an object. But found \"${props}\" instead.`\n    throw new Error(message)\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (Object.keys(props).length === 0 && !ctx.ctx) {\n      console.warn(\n        `${getDisplayName(\n          App\n        )} returned an empty object from \\`getInitialProps\\`. This de-optimizes and prevents automatic static optimization. https://err.sh/vercel/next.js/empty-object-getInitialProps`\n      )\n    }\n  }\n\n  return props\n}\n\nexport const urlObjectKeys = [\n  'auth',\n  'hash',\n  'host',\n  'hostname',\n  'href',\n  'path',\n  'pathname',\n  'port',\n  'protocol',\n  'query',\n  'search',\n  'slashes',\n]\n\nexport function formatWithValidation(url: UrlObject): string {\n  if (process.env.NODE_ENV === 'development') {\n    if (url !== null && typeof url === 'object') {\n      Object.keys(url).forEach((key) => {\n        if (urlObjectKeys.indexOf(key) === -1) {\n          console.warn(\n            `Unknown key passed via urlObject into url.format: ${key}`\n          )\n        }\n      })\n    }\n  }\n\n  return formatUrl(url)\n}\n\nexport const SP = typeof performance !== 'undefined'\nexport const ST =\n  SP &&\n  typeof performance.mark === 'function' &&\n  typeof performance.measure === 'function'\n"]},"metadata":{},"sourceType":"script"}