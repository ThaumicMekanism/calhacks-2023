{"ast":null,"code":"\"use strict\";\n\nvar _s = $RefreshSig$();\nexports.__esModule = true;\nexports.isInAmpMode = isInAmpMode;\nexports.useAmp = useAmp;\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _ampContext = require(\"./amp-context\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nfunction isInAmpMode() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref$ampFirst = _ref.ampFirst,\n    ampFirst = _ref$ampFirst === void 0 ? false : _ref$ampFirst,\n    _ref$hybrid = _ref.hybrid,\n    hybrid = _ref$hybrid === void 0 ? false : _ref$hybrid,\n    _ref$hasQuery = _ref.hasQuery,\n    hasQuery = _ref$hasQuery === void 0 ? false : _ref$hasQuery;\n  return ampFirst || hybrid && hasQuery;\n}\nfunction useAmp() {\n  _s();\n  // Don't assign the context value to a variable to save bytes\n  return isInAmpMode(_react[\"default\"].useContext(_ampContext.AmpStateContext));\n}\n_s(useAmp, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");","map":{"version":3,"sources":["../../../next-server/lib/amp.ts"],"names":["isInAmpMode","ampFirst","hybrid","hasQuery","useAmp","React","useContext","AmpStateContext"],"mappings":";;;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;;;;;AAEO,SAASA,WAAT,CAAA,EAIU;EAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAb,CAAA,CAJG;IAAA,aAAA,GAAA,IAAA,CACLC,QAAQ;IAARA,QAAQ,GAAA,aAAA,cAAG,KADe,GAAA,aAAA;IAAA,WAAA,GAAA,IAAA,CAE1BC,MAAM;IAANA,MAAM,GAAA,WAAA,cAAG,KAFiB,GAAA,WAAA;IAAA,aAAA,GAAA,IAAA,CAG1BC,QAAQ;IAARA,QAAQ,GAAA,aAAA,cAAG,KAHe,GAAA,aAAA;EAK1B,OAAOF,QAAQ,IAAKC,MAAM,IAAIC,QAA9B;AACD;AAEM,SAASC,MAAT,CAAA,EAA2B;EAAA,EAAA;EAChC;EACA,OAAOJ,WAAW,CAACK,MAAAA,WAAAA,CAAMC,UAAND,CAAiBE,WAAAA,CAAAA,eAAjBF,CAAD,CAAlB;AACD;AAAA,EAAA,CAHeD,MAAT","sourcesContent":["import React from 'react'\nimport { AmpStateContext } from './amp-context'\n\nexport function isInAmpMode({\n  ampFirst = false,\n  hybrid = false,\n  hasQuery = false,\n} = {}): boolean {\n  return ampFirst || (hybrid && hasQuery)\n}\n\nexport function useAmp(): boolean {\n  // Don't assign the context value to a variable to save bytes\n  return isInAmpMode(React.useContext(AmpStateContext))\n}\n"]},"metadata":{},"sourceType":"script"}