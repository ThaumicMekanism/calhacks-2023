{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = resolveRewrites;\nvar _pathMatch = _interopRequireDefault(require(\"./path-match\"));\nvar _prepareDestination = _interopRequireDefault(require(\"./prepare-destination\"));\nvar _normalizeTrailingSlash = require(\"../../../../client/normalize-trailing-slash\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst customRouteMatcher = (0, _pathMatch.default)(true);\nfunction resolveRewrites(asPath, pages, basePath, rewrites, query, resolveHref) {\n  if (!pages.includes(asPath)) {\n    for (const rewrite of rewrites) {\n      const matcher = customRouteMatcher(rewrite.source);\n      const params = matcher(asPath);\n      if (params) {\n        if (!rewrite.destination) {\n          // this is a proxied rewrite which isn't handled on the client\n          break;\n        }\n        const destRes = (0, _prepareDestination.default)(rewrite.destination, params, query, true, rewrite.basePath === false ? '' : basePath);\n        asPath = destRes.parsedDestination.pathname;\n        Object.assign(query, destRes.parsedDestination.query);\n        if (pages.includes((0, _normalizeTrailingSlash.removePathTrailingSlash)(asPath))) {\n          // check if we now match a page as this means we are done\n          // resolving the rewrites\n          break;\n        } // check if we match a dynamic-route, if so we break the rewrites chain\n        const resolvedHref = resolveHref(asPath);\n        if (resolvedHref !== asPath && pages.includes(resolvedHref)) {\n          break;\n        }\n      }\n    }\n  }\n  return asPath;\n}","map":{"version":3,"sources":["../../../../../next-server/lib/router/utils/resolve-rewrites.ts"],"names":["customRouteMatcher","resolveRewrites","asPath","pages","basePath","rewrites","query","resolveHref","includes","rewrite","matcher","source","params","destination","destRes","parsedDestination","pathname","Object","assign","resolvedHref"],"mappings":";;;;AACA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;AACA,IAAA,mBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,uBAAA,CAAA,CAAA;AAEA,IAAA,uBAAA,GAAA,OAAA,CAAA,6CAAA,CAAA;;;;;;AAEA,MAAMA,kBAAkB,GAAG,CAAA,CAAA,EAAA,UAAA,CAAA,OAAA,EAAU,IAAV,CAA3B;AAEe,SAASC,eAAT,CACbC,MADa,EAEbC,KAFa,EAGbC,QAHa,EAIbC,QAJa,EAKbC,KALa,EAMbC,WANa,EAOb;EACA,IAAI,CAACJ,KAAK,CAACK,QAANL,CAAeD,MAAfC,CAAL,EAA6B;IAC3B,KAAK,MAAMM,OAAX,IAAsBJ,QAAtB,EAAgC;MAC9B,MAAMK,OAAO,GAAGV,kBAAkB,CAACS,OAAO,CAACE,MAAT,CAAlC;MACA,MAAMC,MAAM,GAAGF,OAAO,CAACR,MAAD,CAAtB;MAEA,IAAIU,MAAJ,EAAY;QACV,IAAI,CAACH,OAAO,CAACI,WAAb,EAA0B;UACxB;UACA;QACD;QACD,MAAMC,OAAO,GAAG,CAAA,CAAA,EAAA,mBAAA,CAAA,OAAA,EACdL,OAAO,CAACI,WADM,EAEdD,MAFc,EAGdN,KAHc,EAId,IAJc,EAKdG,OAAO,CAACL,QAARK,KAAqB,KAArBA,GAA6B,EAA7BA,GAAkCL,QALpB,CAAhB;QAOAF,MAAM,GAAGY,OAAO,CAACC,iBAARD,CAA0BE,QAAnCd;QACAe,MAAM,CAACC,MAAPD,CAAcX,KAAdW,EAAqBH,OAAO,CAACC,iBAARD,CAA0BR,KAA/CW,CAAAA;QAEA,IAAId,KAAK,CAACK,QAANL,CAAe,CAAA,CAAA,EAAA,uBAAA,CAAA,uBAAA,EAAwBD,MAAxB,CAAfC,CAAJ,EAAqD;UACnD;UACA;UACA;QACD,CAED;QACA,MAAMgB,YAAY,GAAGZ,WAAW,CAACL,MAAD,CAAhC;QAEA,IAAIiB,YAAY,KAAKjB,MAAjBiB,IAA2BhB,KAAK,CAACK,QAANL,CAAegB,YAAfhB,CAA/B,EAA6D;UAC3D;QACD;MACF;IACF;EACF;EACD,OAAOD,MAAP;AACD","sourcesContent":["import { ParsedUrlQuery } from 'querystring'\nimport pathMatch from './path-match'\nimport prepareDestination from './prepare-destination'\nimport { Rewrite } from '../../../../lib/load-custom-routes'\nimport { removePathTrailingSlash } from '../../../../client/normalize-trailing-slash'\n\nconst customRouteMatcher = pathMatch(true)\n\nexport default function resolveRewrites(\n  asPath: string,\n  pages: string[],\n  basePath: string,\n  rewrites: Rewrite[],\n  query: ParsedUrlQuery,\n  resolveHref: (path: string) => string\n) {\n  if (!pages.includes(asPath)) {\n    for (const rewrite of rewrites) {\n      const matcher = customRouteMatcher(rewrite.source)\n      const params = matcher(asPath)\n\n      if (params) {\n        if (!rewrite.destination) {\n          // this is a proxied rewrite which isn't handled on the client\n          break\n        }\n        const destRes = prepareDestination(\n          rewrite.destination,\n          params,\n          query,\n          true,\n          rewrite.basePath === false ? '' : basePath\n        )\n        asPath = destRes.parsedDestination.pathname!\n        Object.assign(query, destRes.parsedDestination.query)\n\n        if (pages.includes(removePathTrailingSlash(asPath))) {\n          // check if we now match a page as this means we are done\n          // resolving the rewrites\n          break\n        }\n\n        // check if we match a dynamic-route, if so we break the rewrites chain\n        const resolvedHref = resolveHref(asPath)\n\n        if (resolvedHref !== asPath && pages.includes(resolvedHref)) {\n          break\n        }\n      }\n    }\n  }\n  return asPath\n}\n"]},"metadata":{},"sourceType":"script"}