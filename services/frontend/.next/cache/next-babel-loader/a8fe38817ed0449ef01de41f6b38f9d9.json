{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.parseRelativeUrl = parseRelativeUrl;\nvar _utils = require(\"../../utils\");\nvar _querystring = require(\"./querystring\");\nconst DUMMY_BASE = new URL(true ? 'http://n' : (0, _utils.getLocationOrigin)()); /**\n                                                                                 * Parses path-relative urls (e.g. `/hello/world?foo=bar`). If url isn't path-relative\n                                                                                 * (e.g. `./hello`) then at least base must be.\n                                                                                 * Absolute urls are rejected with one exception, in the browser, absolute urls that are on\n                                                                                 * the current origin will be parsed as relative\n                                                                                 */\nfunction parseRelativeUrl(url, base) {\n  const resolvedBase = base ? new URL(base, DUMMY_BASE) : DUMMY_BASE;\n  const {\n    pathname,\n    searchParams,\n    search,\n    hash,\n    href,\n    origin,\n    protocol\n  } = new URL(url, resolvedBase);\n  if (origin !== DUMMY_BASE.origin || protocol !== 'http:' && protocol !== 'https:') {\n    throw new Error('invariant: invalid relative URL');\n  }\n  return {\n    pathname,\n    query: (0, _querystring.searchParamsToUrlQuery)(searchParams),\n    search,\n    hash,\n    href: href.slice(DUMMY_BASE.origin.length)\n  };\n}","map":{"version":3,"sources":["../../../../../next-server/lib/router/utils/parse-relative-url.ts"],"names":["DUMMY_BASE","URL","parseRelativeUrl","url","base","resolvedBase","pathname","searchParams","search","hash","href","origin","protocol","Error","query","slice","length"],"mappings":";;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AAEA,MAAMA,UAAU,GAAG,IAAIC,GAAJ,CACjB,OAAgC,UAAhC,GAA6C,CAAA,CAAA,EAAA,MAAA,CAAA,iBAAA,EAAA,CAD5B,CAAnB,CAIA;;;;;;AAMO,SAASC,gBAAT,CAA0BC,GAA1B,EAAuCC,IAAvC,EAAsD;EAC3D,MAAMC,YAAY,GAAGD,IAAI,GAAG,IAAIH,GAAJ,CAAQG,IAAR,EAAcJ,UAAd,CAAH,GAA+BA,UAAxD;EACA,MAAM;IACJM,QADI;IAEJC,YAFI;IAGJC,MAHI;IAIJC,IAJI;IAKJC,IALI;IAMJC,MANI;IAOJC;EAPI,CAAA,GAQF,IAAIX,GAAJ,CAAQE,GAAR,EAAaE,YAAb,CARJ;EASA,IACEM,MAAM,KAAKX,UAAU,CAACW,MAAtBA,IACCC,QAAQ,KAAK,OAAbA,IAAwBA,QAAQ,KAAK,QAFxC,EAGE;IACA,MAAM,IAAIC,KAAJ,CAAU,iCAAV,CAAN;EACD;EACD,OAAO;IACLP,QADK;IAELQ,KAAK,EAAE,CAAA,CAAA,EAAA,YAAA,CAAA,sBAAA,EAAuBP,YAAvB,CAFF;IAGLC,MAHK;IAILC,IAJK;IAKLC,IAAI,EAAEA,IAAI,CAACK,KAALL,CAAWV,UAAU,CAACW,MAAXX,CAAkBgB,MAA7BN;EALD,CAAP;AAOD","sourcesContent":["import { getLocationOrigin } from '../../utils'\nimport { searchParamsToUrlQuery } from './querystring'\n\nconst DUMMY_BASE = new URL(\n  typeof window === 'undefined' ? 'http://n' : getLocationOrigin()\n)\n\n/**\n * Parses path-relative urls (e.g. `/hello/world?foo=bar`). If url isn't path-relative\n * (e.g. `./hello`) then at least base must be.\n * Absolute urls are rejected with one exception, in the browser, absolute urls that are on\n * the current origin will be parsed as relative\n */\nexport function parseRelativeUrl(url: string, base?: string) {\n  const resolvedBase = base ? new URL(base, DUMMY_BASE) : DUMMY_BASE\n  const {\n    pathname,\n    searchParams,\n    search,\n    hash,\n    href,\n    origin,\n    protocol,\n  } = new URL(url, resolvedBase)\n  if (\n    origin !== DUMMY_BASE.origin ||\n    (protocol !== 'http:' && protocol !== 'https:')\n  ) {\n    throw new Error('invariant: invalid relative URL')\n  }\n  return {\n    pathname,\n    query: searchParamsToUrlQuery(searchParams),\n    search,\n    hash,\n    href: href.slice(DUMMY_BASE.origin.length),\n  }\n}\n"]},"metadata":{},"sourceType":"script"}